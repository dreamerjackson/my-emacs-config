
<p>Go allows authors to write functions in assembly if required. This is called a <em>stub</em> or <em>forward</em> declaration.</p>



<pre class="wp-block-preformatted">package asm

// Add returns the sum of a and b.
func Add(a int64, b int64) int64</pre>



<p>Here we&#8217;re declaring <code>Add</code>, a function which takes two <code>int64</code>&#8216;s and returns their sum.<code>Add</code> is a normal Go function declaration, except it is missing the function body.</p>



<p>If we were to try to compile this package the compiler, justifiably, complains;</p>



<pre class="wp-block-preformatted">% <strong>go build</strong>
examples/asm
./decl.go:4:6: missing function body</pre>



<p>To satisfy the compiler we must supply a body for <code>Add</code> via assembly, which we do by adding a <code>.s</code> file in the same package.</p>



<pre class="wp-block-preformatted">TEXT Â·Add(SB),$0-24
        MOVQ a+0(FP), AX
        ADDQ b+8(FP), AX
        MOVQ AX, ret+16(FP)
        RET</pre>



<p>Now we can build, test, and use our <code>Add</code> function just like normal Go code. But, there&#8217;s a problem, assembly functions cannot be inlined. </p>



<p>This has long been a complaint by Go developers who want to use assembly either for performance or to access operations which are not exposed in the language. Some examples would be vector instructions, atomic instructions, and so on. Without the ability to inline assembly functions writing these functions in Go can have a relatively large overhead.</p>



<pre class="wp-block-preformatted">var Result int64

func BenchmarkAddNative(b *testing.B) {
        var r int64
        for i := 0; i &lt; b.N; i++ {
                r = int64(i) + int64(i)
        }
        Result = r 
}

func BenchmarkAddAsm(b *testing.B) {
        var r int64
        for i := 0; i &lt; b.N; i++ {
                r = Add(int64(i), int64(i))
        }
        Result = r
 }</pre>



<pre class="wp-block-preformatted">BenchmarkAddNative-8&nbsp; &nbsp; 1000000000 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0.300 ns/op
BenchmarkAddAsm-8 &nbsp; &nbsp; &nbsp; 606165915&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1.93 ns/op</pre>



<p>Over the years there have been various proposals for an inline assembly syntax similar to gcc&#8217;s <code>asm(...)</code> directive. None have been accepted by the Go team. Instead, Go has added <em>intrinsic functions</em><span id='easy-footnote-1-3803' class='easy-footnote-margin-adjust'></span><span class='easy-footnote'><a href='https://dave.cheney.net/2019/08/20/go-compiler-intrinsics#easy-footnote-bottom-1-3803' title='This may not be their official name, however the word is in common use inside the compiler and its tests'><sup>1</sup></a></span>.</p>



<p>An intrinsic function is Go code written in regular Go. These functions are known the the Go compiler which contains replacements which it can substitute during compilation. As of Go 1.13 the packages which the compiler knows about are:</p>



<ul><li><code>math/bits</code></li><li><code>sync/atomic</code></li></ul>



<p>The functions in these packages have baroque signatures but this lets the compiler, if your architecture supports a more efficient way of performing the operation, transparently replace the function call with comparable native instructions.</p>



<p>For the remainder of this post we&#8217;ll study two different ways the Go compiler produces more efficient code using intrinsics.</p>



<h2>Ones count</h2>



<p>Population count, the number of <code>1</code> bits in a word, is an important cryptographic and compression primitive. Because this is an important operation most modern CPUs provide a native hardware implementation.</p>



<p>The <code>math/bits</code> package exposes support for this operation via the <code>OnesCount</code> series of functions. The various <code>OnesCount</code> functions are recognised by the compiler and, depending on the CPU architecture and the version of Go,  will be replaced with the native hardware instruction.</p>



<p>To see how effective this can be lets compare three different ones count implementations. The first is Kernighan&#8217;s&nbsp;Algorithm<span id='easy-footnote-2-3803' class='easy-footnote-margin-adjust'></span><span class='easy-footnote'><a href='https://dave.cheney.net/2019/08/20/go-compiler-intrinsics#easy-footnote-bottom-2-3803' title='The C Programming Language 2nd Ed, 1998'><sup>2</sup></a></span>.</p>



<pre class="wp-block-preformatted">func kernighan(x uint64) int {
        var count int
        for ; x &gt; 0; x &amp;= (x - 1) {
                count++
 &nbsp; &nbsp; &nbsp;  }
 &nbsp; &nbsp; &nbsp;  return count &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
} &nbsp; &nbsp; </pre>



<p>This algorithm has a maximum loop count of the number of bits set; the more bits set, the more loops it will take.</p>



<p>The second algorithm is taken from Hacker&#8217;s Delight via <a href="https://github.com/golang/go/issues/14813">issue 14813</a>. </p>



<pre class="wp-block-preformatted">func hackersdelight(x uint64) int {
        const m1 = 0x5555555555555555
        const m2 = 0x3333333333333333
        const m4 = 0x0f0f0f0f0f0f0f0f
        const h01 = 0x0101010101010101

        x -= (x &gt;&gt; 1) &amp; m1
        x = (x &amp; m2) + ((x &gt;&gt; 2) &amp; m2)
        x = (x + (x &gt;&gt; 4)) &amp; m4
        return int((x * h01) &gt;&gt; 56)
 } </pre>



<p>Lots of clever bit twiddling allows this version to run in constant time and optimises very well if the input is a constant (the whole thing optimises away if the compiler can figure out the answer at compiler time).</p>



<p>Let&#8217;s benchmark these implementations against <code>math/bits.OnesCount64</code>.</p>



<pre class="wp-block-preformatted">var Result int

func BenchmarkKernighan(b *testing.B) {
        var r int
        for i := 0; i &lt; b.N; i++ {
                r = kernighan(uint64(i))
        }
        Result = r
}

func BenchmarkPopcnt(b *testing.B) {
        var r int
        for i := 0; i &lt; b.N; i++ {
                r = hackersdelight(uint64(i))
        }
        Result = r
}

func BenchmarkMathBitsOnesCount64(b *testing.B) {
        var r int
        for i := 0; i &lt; b.N; i++ {
                r = bits.OnesCount64(uint64(i))
        }
        Result = r
}</pre>



<p>To keep it fair, we&#8217;re feeding each function under test the same input; a sequence of integers from zero to <code>b.N</code>. This is fairer to Kernighan&#8217;s method as its runtime increases with the number of one bits in the input argument.<span id='easy-footnote-3-3803' class='easy-footnote-margin-adjust'></span><span class='easy-footnote'><a href='https://dave.cheney.net/2019/08/20/go-compiler-intrinsics#easy-footnote-bottom-3-3803' title='As extra credit homework, try passing &lt;code&gt;0xdeadbeefdeadbeef&lt;/code&gt; to each function under test and observe the results.'><sup>3</sup></a></span></p>



<pre class="wp-block-preformatted">BenchmarkKernighan-8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 100000000 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 11.2 ns/op
BenchmarkPopcnt-8 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 618312062&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2.02 ns/op
BenchmarkMathBitsOnesCount64-8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1000000000 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0.565 ns/op </pre>



<p>The winner by nearly 4x is <code>math/bits.OnesCount64</code>, but is this really using a hardware instruction, or is the compiler just doing a better job at optimising this code? Let&#8217;s check the assembly</p>



<pre class="wp-block-preformatted">% <strong>go test -c</strong>
% <strong>go tool objdump -s MathBitsOnesCount popcnt-intrinsic.test</strong>
TEXT examples/popcnt-intrinsic.BenchmarkMathBitsOnesCount64(SB) /examples/popcnt-intrinsic/popcnt_test.go
 &nbsp; popcnt_test.go:45 &nbsp; &nbsp; 0x10f8610 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 65488b0c2530000000&nbsp; &nbsp; &nbsp; MOVQ GS:0x30, CX
 &nbsp; popcnt_test.go:45 &nbsp; &nbsp; 0x10f8619 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 483b6110&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CMPQ 0x10(CX), SP
 &nbsp; popcnt_test.go:45 &nbsp; &nbsp; 0x10f861d &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 7668&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; JBE 0x10f8687
 &nbsp; popcnt_test.go:45 &nbsp; &nbsp; 0x10f861f &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 4883ec20&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SUBQ $0x20, SP
 &nbsp; popcnt_test.go:45 &nbsp; &nbsp; 0x10f8623 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 48896c2418&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MOVQ BP, 0x18(SP)
 &nbsp; popcnt_test.go:45 &nbsp; &nbsp; 0x10f8628 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 488d6c2418&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LEAQ 0x18(SP), BP
 &nbsp; popcnt_test.go:47 &nbsp; &nbsp; 0x10f862d &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 488b442428&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MOVQ 0x28(SP), AX
 &nbsp; popcnt_test.go:47 &nbsp; &nbsp; 0x10f8632 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 31c9&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; XORL CX, CX
 &nbsp; popcnt_test.go:47 &nbsp; &nbsp; 0x10f8634 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 31d2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; XORL DX, DX
 &nbsp; popcnt_test.go:47 &nbsp; &nbsp; 0x10f8636 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; eb03&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; JMP 0x10f863b
 &nbsp; popcnt_test.go:47 &nbsp; &nbsp; 0x10f8638 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 48ffc1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; INCQ CX
 &nbsp; popcnt_test.go:47 &nbsp; &nbsp; 0x10f863b &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 48398808010000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CMPQ CX, 0x108(AX)
 &nbsp; popcnt_test.go:47 &nbsp; &nbsp; 0x10f8642 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 7e32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; JLE 0x10f8676
<strong> &nbsp; popcnt_test.go:48 &nbsp; &nbsp; 0x10f8644 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 803d29d5150000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CMPB $0x0, runtime.x86HasPOPCNT(SB)</strong>
 &nbsp; popcnt_test.go:48 &nbsp; &nbsp; 0x10f864b &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 740a&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; JE 0x10f8657
 &nbsp; popcnt_test.go:48 &nbsp; &nbsp; 0x10f864d &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 4831d2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; XORQ DX, DX
<strong> &nbsp; popcnt_test.go:48 &nbsp; &nbsp; 0x10f8650 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; f3480fb8d1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; POPCNT CX, DX // math/bits.OnesCount64</strong>
 &nbsp; popcnt_test.go:48 &nbsp; &nbsp; 0x10f8655 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ebe1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; JMP 0x10f8638
 &nbsp; popcnt_test.go:47 &nbsp; &nbsp; 0x10f8657 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 48894c2410&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MOVQ CX, 0x10(SP)
 &nbsp; popcnt_test.go:48 &nbsp; &nbsp; 0x10f865c &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 48890c24&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MOVQ CX, 0(SP)
<strong> &nbsp; popcnt_test.go:48 &nbsp; &nbsp; 0x10f8660 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e87b28f8ff&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CALL math/bits.OnesCount64(SB)</strong>
 &nbsp; popcnt_test.go:48 &nbsp; &nbsp; 0x10f8665 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 488b542408&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MOVQ 0x8(SP), DX
 &nbsp; popcnt_test.go:47 &nbsp; &nbsp; 0x10f866a &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 488b442428&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MOVQ 0x28(SP), AX
 &nbsp; popcnt_test.go:47 &nbsp; &nbsp; 0x10f866f &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 488b4c2410&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MOVQ 0x10(SP), CX
 &nbsp; popcnt_test.go:48 &nbsp; &nbsp; 0x10f8674 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ebc2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; JMP 0x10f8638
 &nbsp; popcnt_test.go:50 &nbsp; &nbsp; 0x10f8676 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 48891563d51500&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MOVQ DX, examples/popcnt-intrinsic.Result(SB)
 &nbsp; popcnt_test.go:51 &nbsp; &nbsp; 0x10f867d &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 488b6c2418&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MOVQ 0x18(SP), BP
 &nbsp; popcnt_test.go:51 &nbsp; &nbsp; 0x10f8682 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 4883c420&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ADDQ $0x20, SP
 &nbsp; popcnt_test.go:51 &nbsp; &nbsp; 0x10f8686 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; c3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RET
 &nbsp; popcnt_test.go:45 &nbsp; &nbsp; 0x10f8687 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e884eef5ff&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CALL runtime.morestack_noctxt(SB)
 &nbsp; popcnt_test.go:45 &nbsp; &nbsp; 0x10f868c &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; eb82&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; JMP examples/popcnt-intrinsic.BenchmarkMathBitsOnesCount64(SB)
 &nbsp; :-1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0x10f868e &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cc&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; INT $0x3
 &nbsp; :-1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0x10f868f &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cc&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; INT $0x3 </pre>



<p>There&#8217;s quite a bit going on here, but the key take away is on line 48 (taken from the source code of the <code>_test.go</code> file) the program is using the x86 <code>POPCNT</code> instruction as we hoped. This turns out to be faster than bit twiddling.</p>



<p>Of interest is the comparison two instructions prior to the <code>POPCNT</code>,</p>



<pre class="wp-block-preformatted"><strong>CMPB $0x0, runtime.x86HasPOPCNT(SB)</strong></pre>



<p>As not all intel CPUs support <code>POPCNT</code> the Go runtime records at startup if the CPU has the necessary support and stores the result in <code>runtime.x86HasPOPCNT</code>. Each time through the benchmark loop the program is checking <em>does the CPU have POPCNT support</em> before it issues the <code>POPCNT</code> request. </p>



<p>The value of <code>runtime.x86HasPOPCNT</code> isn&#8217;t expected to change during the life of the program&#8217;s execution so the result of the check should be highly predictable making the check relatively cheap.</p>



<h2>Atomic counter</h2>



<p>As well as generating more efficient code, intrinsic functions are just regular Go code, the rules of inlining (including mid stack inlining) apply equally to them.</p>



<p>Here&#8217;s an example of an atomic counter type. It&#8217;s got methods on types, method calls several layers deep, multiple packages, etc.</p>



<pre class="wp-block-preformatted">import (
         "sync/atomic"
)

type counter uint64

func (c counter) get() uint64 {
         return atomic.LoadUint64((uint64)(c))
}

func (c counter) inc() uint64 {
        return atomic.AddUint64((uint64)(c), 1)
}

func (c counter) reset() uint64 {
        return atomic.SwapUint64((uint64)(c), 0)
}

var c counter

func f() uint64 {
        c.inc()
        c.get()
        return c.reset()
}</pre>



<p>You&#8217;d be forgiven for thinking this would have a lot of overhead. However, because of the interaction between inlining and compiler intrinsics, this code collapses down to efficient native code on most platforms.</p>



<pre class="wp-block-preformatted">TEXT main.f(SB) examples/counter/counter.go
 &nbsp; counter.go:23 &nbsp; &nbsp; &nbsp; &nbsp; 0x10512e0 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 90&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; NOPL
 &nbsp; counter.go:29 &nbsp; &nbsp; &nbsp; &nbsp; 0x10512e1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; b801000000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MOVL $0x1, AX
 &nbsp; counter.go:13 &nbsp; &nbsp; &nbsp; &nbsp; 0x10512e6 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 488d0d0bca0800&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LEAQ main.c(SB), CX
<strong> &nbsp; counter.go:13 &nbsp; &nbsp; &nbsp; &nbsp; 0x10512ed &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; f0480fc101&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LOCK XADDQ AX, 0(CX) // c.inc
</strong> &nbsp; counter.go:24 &nbsp; &nbsp; &nbsp; &nbsp; 0x10512f2 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 90&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; NOPL
<strong> &nbsp; counter.go:10 &nbsp; &nbsp; &nbsp; &nbsp; 0x10512f3 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 488b05fec90800&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MOVQ main.c(SB), AX // c.get
</strong> &nbsp; counter.go:25 &nbsp; &nbsp; &nbsp; &nbsp; 0x10512fa &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 90&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; NOPL
 &nbsp; counter.go:16 &nbsp; &nbsp; &nbsp; &nbsp; 0x10512fb &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 31c0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; XORL AX, AX
<strong> &nbsp; counter.go:16 &nbsp; &nbsp; &nbsp; &nbsp; 0x10512fd &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 488701&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; XCHGQ AX, 0(CX) // c.reset
</strong> &nbsp; counter.go:16 &nbsp; &nbsp; &nbsp; &nbsp; 0x1051300 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; c3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RET </pre>



<p>By way of explanation. The first operation, <code>counter.go:13</code> is <code>c.inc</code> a <code>LOCK</code>ed <code>XADDQ</code>, which on x86 is an atomic increment. The second, <code>counter.go:10</code> is <code>c.get</code> which on x86, due to its strong memory consistency model, is a regular load from memory. The final operation, <code>counter.go:16</code>, <code>c.reset</code> is an atomic exchange of the address in <code>CX</code> with <code>AX</code> which was zeroed on the previous line. This puts the value in <code>AX</code>, zero, into the address stored in <code>CX</code>. The value previously stored at <code>(CX)</code> is discarded.</p>



<h2>Conclusion</h2>



<p>Intrinsics are a neat solution that give Go programmers access to low level architectural operations without having to extend the specification of the language. If an architecture doesn&#8217;t have a specific <code>sync/atomic</code> primitive (like some ARM variants), or a <code>math/bits</code> operation, then the compiler transparently falls back to the operation written in pure Go.</p>
